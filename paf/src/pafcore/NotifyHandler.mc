//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./Reference.mh"
#include "./Iterator.mh"
#include "NotifyHandler.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "VoidType.h"
#include "RefCountImpl.h"
#include "Iterator.h"
#include <new>


namespace idlcpp
{

	__pafcore__PropertyChangedFlag_Type::__pafcore__PropertyChangedFlag_Type() : ::pafcore::EnumType("PropertyChangedFlag", "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandler.i")
	{
		m_size = sizeof(::pafcore::PropertyChangedFlag);
		static ::pafcore::Enumerator s_enumerators[] = 
		{
			::pafcore::Enumerator("add", 0, __pafcore__PropertyChangedFlag_Type::GetSingleton(), int(::pafcore::PropertyChangedFlag::add)),
			::pafcore::Enumerator("candidate_list", 0, __pafcore__PropertyChangedFlag_Type::GetSingleton(), int(::pafcore::PropertyChangedFlag::candidate_list)),
			::pafcore::Enumerator("remove", 0, __pafcore__PropertyChangedFlag_Type::GetSingleton(), int(::pafcore::PropertyChangedFlag::remove)),
			::pafcore::Enumerator("reset", 0, __pafcore__PropertyChangedFlag_Type::GetSingleton(), int(::pafcore::PropertyChangedFlag::reset)),
			::pafcore::Enumerator("update", 0, __pafcore__PropertyChangedFlag_Type::GetSingleton(), int(::pafcore::PropertyChangedFlag::update)),
		};
		m_enumerators = s_enumerators;
		m_enumeratorCount = paf_array_size_of(s_enumerators);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	__pafcore__PropertyChangedFlag_Type* __pafcore__PropertyChangedFlag_Type::GetSingleton()
	{
		static __pafcore__PropertyChangedFlag_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__PropertyChangedFlag_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__PropertyChangedFlag_Type*)s_buffer;
			new (s_buffer)__pafcore__PropertyChangedFlag_Type;
		}
		return s_instance;
	}

	__pafcore__NotifyHandler_Type::__pafcore__NotifyHandler_Type() : ::pafcore::ClassType("NotifyHandler", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandler.i")
	{
		m_size = sizeof(::pafcore::NotifyHandler);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::NotifyHandler, ::pafcore::Reference)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__NotifyHandler_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__NotifyHandler_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::NotifyHandler>*>(address));
	}

	bool __pafcore__NotifyHandler_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__NotifyHandler_Type* __pafcore__NotifyHandler_Type::GetSingleton()
	{
		static __pafcore__NotifyHandler_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__NotifyHandler_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__NotifyHandler_Type*)s_buffer;
			new (s_buffer)__pafcore__NotifyHandler_Type;
		}
		return s_instance;
	}

	__pafcore__PropertyChangedNotifyHandler_Type::__pafcore__PropertyChangedNotifyHandler_Type() : ::pafcore::ClassType("PropertyChangedNotifyHandler", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandler.i")
	{
		m_size = sizeof(::pafcore::PropertyChangedNotifyHandler);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::PropertyChangedNotifyHandler, ::pafcore::NotifyHandler)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		static ::pafcore::Result s_instanceResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_instanceArguments[] = 
		{
			::pafcore::Argument("sender", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("propertyName", RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("flag", RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("iterator", RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("sender", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("propertyName", RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("sender", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("propertyName", RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("flag", RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("iterator", RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("sender", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
		};
		static ::pafcore::Overload s_instanceOverloads[] = 
		{
			::pafcore::Overload(&s_instanceResults[0], &s_instanceArguments[0], 4, false, false),
			::pafcore::Overload(&s_instanceResults[1], &s_instanceArguments[4], 2, false, false),
			::pafcore::Overload(&s_instanceResults[2], &s_instanceArguments[6], 4, false, false),
			::pafcore::Overload(&s_instanceResults[3], &s_instanceArguments[10], 1, false, false),
		};
		static ::pafcore::InstanceMethod s_instanceMethods[] = 
		{
			::pafcore::InstanceMethod("onDynamicPropertyChanged", 0, PropertyChangedNotifyHandler_onDynamicPropertyChanged, &s_instanceOverloads[0], 1),
			::pafcore::InstanceMethod("onPropertyAvailabilityChanged", 0, PropertyChangedNotifyHandler_onPropertyAvailabilityChanged, &s_instanceOverloads[1], 1),
			::pafcore::InstanceMethod("onPropertyChanged", 0, PropertyChangedNotifyHandler_onPropertyChanged, &s_instanceOverloads[2], 1),
			::pafcore::InstanceMethod("onUpdateDynamicProperty", 0, PropertyChangedNotifyHandler_onUpdateDynamicProperty, &s_instanceOverloads[3], 1),
		};
		m_instanceMethods = s_instanceMethods;
		m_instanceMethodCount = paf_array_size_of(s_instanceMethods);
		static Metadata* s_members[] = 
		{
			&s_instanceMethods[0],
			&s_instanceMethods[1],
			&s_instanceMethods[2],
			&s_instanceMethods[3],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__PropertyChangedNotifyHandler_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__PropertyChangedNotifyHandler_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::PropertyChangedNotifyHandler>*>(address));
	}

	bool __pafcore__PropertyChangedNotifyHandler_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	void* __pafcore__PropertyChangedNotifyHandler_Type::createSubclassProxy(::pafcore::SubclassInvoker* subclassInvoker)
	{
		return paf_new ::pafcore::RefCountImpl<__pafcore__PropertyChangedNotifyHandler_Proxy>(subclassInvoker);
	}

	void __pafcore__PropertyChangedNotifyHandler_Type::destroySubclassProxy(void* subclassProxy)
	{
		delete reinterpret_cast<::pafcore::RefCountImpl<__pafcore__PropertyChangedNotifyHandler_Proxy>*>(subclassProxy)->m_subclassInvoker;
		reinterpret_cast<::pafcore::RefCountImpl<__pafcore__PropertyChangedNotifyHandler_Proxy>*>(subclassProxy)->m_subclassInvoker = 0;
		destroyInstance(subclassProxy);
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifyHandler_Type::PropertyChangedNotifyHandler_onDynamicPropertyChanged(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(5 <= numArgs)
		{
			::pafcore::PropertyChangedNotifyHandler* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			string_t a1;
			if(!args[2]->castToPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			::pafcore::PropertyChangedFlag a2;
			if(!args[3]->castToEnum(RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), &a2))
			{
				return ::pafcore::e_invalid_arg_type_3;
			}
			::pafcore::Iterator* a3;
			if(!args[4]->castToReferencePtr(RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), (void**)&a3))
			{
				return ::pafcore::e_invalid_arg_type_4;
			}
			self->onDynamicPropertyChanged(a0, a1, a2, a3);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifyHandler_Type::PropertyChangedNotifyHandler_onPropertyAvailabilityChanged(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(3 <= numArgs)
		{
			::pafcore::PropertyChangedNotifyHandler* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			string_t a1;
			if(!args[2]->castToPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			self->onPropertyAvailabilityChanged(a0, a1);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifyHandler_Type::PropertyChangedNotifyHandler_onPropertyChanged(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(5 <= numArgs)
		{
			::pafcore::PropertyChangedNotifyHandler* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			string_t a1;
			if(!args[2]->castToPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			::pafcore::PropertyChangedFlag a2;
			if(!args[3]->castToEnum(RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), &a2))
			{
				return ::pafcore::e_invalid_arg_type_3;
			}
			::pafcore::Iterator* a3;
			if(!args[4]->castToReferencePtr(RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), (void**)&a3))
			{
				return ::pafcore::e_invalid_arg_type_4;
			}
			self->onPropertyChanged(a0, a1, a2, a3);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifyHandler_Type::PropertyChangedNotifyHandler_onUpdateDynamicProperty(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			::pafcore::PropertyChangedNotifyHandler* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->onUpdateDynamicProperty(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__PropertyChangedNotifyHandler_Type* __pafcore__PropertyChangedNotifyHandler_Type::GetSingleton()
	{
		static __pafcore__PropertyChangedNotifyHandler_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__PropertyChangedNotifyHandler_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__PropertyChangedNotifyHandler_Type*)s_buffer;
			new (s_buffer)__pafcore__PropertyChangedNotifyHandler_Type;
		}
		return s_instance;
	}

	__pafcore__PropertyChangedNotifyHandler_Proxy::__pafcore__PropertyChangedNotifyHandler_Proxy(::pafcore::SubclassInvoker* subclassInvoker)
	{
		m_subclassInvoker = subclassInvoker;
	}

	__pafcore__PropertyChangedNotifyHandler_Proxy::~__pafcore__PropertyChangedNotifyHandler_Proxy()
	{
		delete m_subclassInvoker;
	}

	void __pafcore__PropertyChangedNotifyHandler_Proxy::onPropertyChanged( pafcore::Reference* sender, string_t propertyName, pafcore::PropertyChangedFlag flag, pafcore::Iterator* iterator)
	{
		pafcore::Variant __result__, __self__;
		pafcore::Variant __arguments__[4];
		__self__.assignReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), this, false, ::pafcore::Variant::by_ptr);
		__arguments__[0].assignReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), sender, false, ::pafcore::Variant::by_ptr);
		__arguments__[1].assignPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &propertyName);
		__arguments__[2].assignEnum(RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), &flag);
		__arguments__[3].assignReferencePtr(RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), iterator, false, ::pafcore::Variant::by_ptr);
		if(m_subclassInvoker)
		{
			::pafcore::ErrorCode __error__ = m_subclassInvoker->invoke("onPropertyChanged", &__result__, &__self__, __arguments__, 4);
		}
	}

	void __pafcore__PropertyChangedNotifyHandler_Proxy::onPropertyAvailabilityChanged( pafcore::Reference* sender, string_t propertyName)
	{
		pafcore::Variant __result__, __self__;
		pafcore::Variant __arguments__[2];
		__self__.assignReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), this, false, ::pafcore::Variant::by_ptr);
		__arguments__[0].assignReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), sender, false, ::pafcore::Variant::by_ptr);
		__arguments__[1].assignPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &propertyName);
		if(m_subclassInvoker)
		{
			::pafcore::ErrorCode __error__ = m_subclassInvoker->invoke("onPropertyAvailabilityChanged", &__result__, &__self__, __arguments__, 2);
		}
	}

	void __pafcore__PropertyChangedNotifyHandler_Proxy::onDynamicPropertyChanged( pafcore::Reference* sender, string_t propertyName, pafcore::PropertyChangedFlag flag, pafcore::Iterator* iterator)
	{
		pafcore::Variant __result__, __self__;
		pafcore::Variant __arguments__[4];
		__self__.assignReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), this, false, ::pafcore::Variant::by_ptr);
		__arguments__[0].assignReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), sender, false, ::pafcore::Variant::by_ptr);
		__arguments__[1].assignPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &propertyName);
		__arguments__[2].assignEnum(RuntimeTypeOf<::pafcore::PropertyChangedFlag>::RuntimeType::GetSingleton(), &flag);
		__arguments__[3].assignReferencePtr(RuntimeTypeOf<::pafcore::Iterator>::RuntimeType::GetSingleton(), iterator, false, ::pafcore::Variant::by_ptr);
		if(m_subclassInvoker)
		{
			::pafcore::ErrorCode __error__ = m_subclassInvoker->invoke("onDynamicPropertyChanged", &__result__, &__self__, __arguments__, 4);
		}
	}

	void __pafcore__PropertyChangedNotifyHandler_Proxy::onUpdateDynamicProperty( pafcore::Reference* sender)
	{
		pafcore::Variant __result__, __self__;
		pafcore::Variant __arguments__[1];
		__self__.assignReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), this, false, ::pafcore::Variant::by_ptr);
		__arguments__[0].assignReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), sender, false, ::pafcore::Variant::by_ptr);
		if(m_subclassInvoker)
		{
			::pafcore::ErrorCode __error__ = m_subclassInvoker->invoke("onUpdateDynamicProperty", &__result__, &__self__, __arguments__, 1);
		}
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__PropertyChangedFlag_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__NotifyHandler_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__PropertyChangedNotifyHandler_Type)
