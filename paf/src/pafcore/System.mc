//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "System.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "VoidType.h"
#include "RefCountImpl.h"
#include "Iterator.h"
#include <new>


namespace idlcpp
{

	__pafcore__System_Type::__pafcore__System_Type() : ::pafcore::ClassType("System", ::pafcore::value_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/System.i")
	{
		m_size = sizeof(::pafcore::System);
		static ::pafcore::Result s_staticResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_staticArguments[] = 
		{
			::pafcore::Argument("fileName", RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
			::pafcore::Argument("str", RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_value, false),
		};
		static ::pafcore::Overload s_staticOverloads[] = 
		{
			::pafcore::Overload(&s_staticResults[0], 0, 0, true, false),
			::pafcore::Overload(&s_staticResults[1], 0, 0, true, false),
			::pafcore::Overload(&s_staticResults[2], &s_staticArguments[0], 1, true, false),
			::pafcore::Overload(&s_staticResults[3], &s_staticArguments[1], 1, true, false),
		};
		static ::pafcore::StaticMethod s_staticMethods[] = 
		{
			::pafcore::StaticMethod("DebugBreak", 0, System_DebugBreak, &s_staticOverloads[0], 1),
			::pafcore::StaticMethod("GetProgramPath", 0, System_GetProgramPath, &s_staticOverloads[1], 1),
			::pafcore::StaticMethod("LoadDLL", 0, System_LoadDLL, &s_staticOverloads[2], 1),
			::pafcore::StaticMethod("OutputDebug", 0, System_OutputDebug, &s_staticOverloads[3], 1),
		};
		m_staticMethods = s_staticMethods;
		m_staticMethodCount = paf_array_size_of(s_staticMethods);
		static Metadata* s_members[] = 
		{
			&s_staticMethods[0],
			&s_staticMethods[1],
			&s_staticMethods[2],
			&s_staticMethods[3],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__System_Type::destroyInstance(void* address)
	{
		delete reinterpret_cast<::pafcore::System*>(address);
	}

	void __pafcore__System_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::System*>(address));
	}

	bool __pafcore__System_Type::assign(void* dst, const void* src)
	{
		*(::pafcore::System*)dst = *(const ::pafcore::System*)src;
		return true;
	}

	::pafcore::ErrorCode __pafcore__System_Type::System_DebugBreak(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(0 <= numArgs)
		{
			::pafcore::System::DebugBreak();
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__System_Type::System_GetProgramPath(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(0 <= numArgs)
		{
			string_t res = ::pafcore::System::GetProgramPath();
			result->assignPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &res);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__System_Type::System_LoadDLL(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(1 <= numArgs)
		{
			string_t a0;
			if(!args[0]->castToPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			::pafcore::System::LoadDLL(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__System_Type::System_OutputDebug(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(1 <= numArgs)
		{
			string_t a0;
			if(!args[0]->castToPrimitive(RuntimeTypeOf<string_t>::RuntimeType::GetSingleton(), &a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			::pafcore::System::OutputDebug(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__System_Type* __pafcore__System_Type::GetSingleton()
	{
		static __pafcore__System_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__System_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__System_Type*)s_buffer;
			new (s_buffer)__pafcore__System_Type;
		}
		return s_instance;
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__System_Type)
