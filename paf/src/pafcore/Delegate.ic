//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "Delegate.h"
#include "Delegate.mh"
#include "RefCountImpl.h"

namespace pafcore
{

	::pafcore::ClassType* CallBack::GetType()
	{
		return ::RuntimeTypeOf<CallBack>::RuntimeType::GetSingleton();
	}

	::pafcore::ClassType* CallBack::getType()
	{
		return ::RuntimeTypeOf<CallBack>::RuntimeType::GetSingleton();
	}

	size_t CallBack::getAddress()
	{
		return (size_t)this;
	}

	::pafcore::ClassType* FunctionCallBack::GetType()
	{
		return ::RuntimeTypeOf<FunctionCallBack>::RuntimeType::GetSingleton();
	}

	::pafcore::ClassType* FunctionCallBack::getType()
	{
		return ::RuntimeTypeOf<FunctionCallBack>::RuntimeType::GetSingleton();
	}

	size_t FunctionCallBack::getAddress()
	{
		return (size_t)this;
	}

	::pafcore::ClassType* InstanceMethodCallBack::GetType()
	{
		return ::RuntimeTypeOf<InstanceMethodCallBack>::RuntimeType::GetSingleton();
	}

	::pafcore::ClassType* InstanceMethodCallBack::getType()
	{
		return ::RuntimeTypeOf<InstanceMethodCallBack>::RuntimeType::GetSingleton();
	}

	size_t InstanceMethodCallBack::getAddress()
	{
		return (size_t)this;
	}

	::pafcore::ClassType* StaticMethodCallBack::GetType()
	{
		return ::RuntimeTypeOf<StaticMethodCallBack>::RuntimeType::GetSingleton();
	}

	::pafcore::ClassType* StaticMethodCallBack::getType()
	{
		return ::RuntimeTypeOf<StaticMethodCallBack>::RuntimeType::GetSingleton();
	}

	size_t StaticMethodCallBack::getAddress()
	{
		return (size_t)this;
	}

	::pafcore::ClassType* Delegate::GetType()
	{
		return ::RuntimeTypeOf<Delegate>::RuntimeType::GetSingleton();
	}

	void EventHandler::invoke(Reference* sender)
	{
		bool __arguments_init__ = false;
		pafcore::Variant __result__;
		::pafcore::Variant __arguments__[1];
		::pafcore::Variant* __args__[2] = {0, &__arguments__[0]};
		::pafcore::CallBack* __callBack__ = getCallBack();
		while (__callBack__)
		{
			::pafcore::CallBack* __next__ = __callBack__->getNext();
			::pafcore::ClassType* __classType__ = __callBack__->getType();
			if (__classType__ == ::pafcore::FunctionCallBack::GetType())
			{
				::pafcore::FunctionCallBack* __functionCallBack__ = static_cast<::pafcore::FunctionCallBack*>(__callBack__);
				(*(CallBackFunction)__functionCallBack__->m_function)(__functionCallBack__->m_userData, sender);
			}
			else
			{
				if(!__arguments_init__)
				{
					__arguments_init__ = false;
					__arguments__[0].assignReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), sender, false, ::pafcore::Variant::by_ptr);
				}
				__callBack__->invoke(&__result__, __args__, 2);
			}
			__callBack__ = __next__;
		}
	}
}

