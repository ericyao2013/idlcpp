//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./Metadata.h"
namespace pafcore{ class ClassType; }

namespace pafcore
{
	class PAFCORE_EXPORT Type : public Metadata
	{
	public:
		static ::pafcore::ClassType* GetType();
		virtual ::pafcore::ClassType* getType();
		virtual size_t getAddress();

		size_t get__size_() const;

	public:
		Type(const char* name, Category category, const char* declarationFile);
		~Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
		virtual Metadata* findMember(const char* name) = 0;
	public:
		bool isPrimitive() const;
		bool isEnum() const;
		bool isValue() const;
		bool isReference() const;
		bool isClass() const;
		const char* getDeclarationFile() const;
	public:
		Category m_category;
		size_t m_size;
		Metadata* m_enclosing;
		const char* m_declarationFile;//类型声明所在文件路径

	};



	inline size_t Type::get__size_() const
	{
		return m_size;
	}

	inline bool Type::isPrimitive() const
	{
		return primitive_object == m_category;
	}
	
	inline bool Type::isEnum() const
	{
		return enum_object == m_category;
	}
	
	inline bool Type::isValue() const
	{
		return value_object == m_category;
	}
	
	inline bool Type::isReference() const
	{
		return reference_object <= m_category;
	}

	inline bool Type::isClass() const
	{
		return value_object <= m_category;
	}
	
	inline const char* Type::getDeclarationFile() const
	{
		return m_declarationFile;
	}



}
