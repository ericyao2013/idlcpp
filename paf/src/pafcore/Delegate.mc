//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./Reference.mh"
#include "./ClassType.mh"
#include "Delegate.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "VoidType.h"
#include "RefCountImpl.h"
#include "Iterator.h"
#include <new>


namespace idlcpp
{

	__pafcore__CallBack_Type::__pafcore__CallBack_Type() : ::pafcore::ClassType("CallBack", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::CallBack);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::CallBack, ::pafcore::Reference)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__CallBack_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__CallBack_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::CallBack>*>(address));
	}

	bool __pafcore__CallBack_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__CallBack_Type* __pafcore__CallBack_Type::GetSingleton()
	{
		static __pafcore__CallBack_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__CallBack_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__CallBack_Type*)s_buffer;
			new (s_buffer)__pafcore__CallBack_Type;
		}
		return s_instance;
	}

	__pafcore__FunctionCallBack_Type::__pafcore__FunctionCallBack_Type() : ::pafcore::ClassType("FunctionCallBack", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::FunctionCallBack);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::FunctionCallBack, ::pafcore::CallBack)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__FunctionCallBack_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__FunctionCallBack_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::FunctionCallBack>*>(address));
	}

	bool __pafcore__FunctionCallBack_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__FunctionCallBack_Type* __pafcore__FunctionCallBack_Type::GetSingleton()
	{
		static __pafcore__FunctionCallBack_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__FunctionCallBack_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__FunctionCallBack_Type*)s_buffer;
			new (s_buffer)__pafcore__FunctionCallBack_Type;
		}
		return s_instance;
	}

	__pafcore__InstanceMethodCallBack_Type::__pafcore__InstanceMethodCallBack_Type() : ::pafcore::ClassType("InstanceMethodCallBack", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::InstanceMethodCallBack);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::InstanceMethodCallBack, ::pafcore::CallBack)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__InstanceMethodCallBack_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__InstanceMethodCallBack_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::InstanceMethodCallBack>*>(address));
	}

	bool __pafcore__InstanceMethodCallBack_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__InstanceMethodCallBack_Type* __pafcore__InstanceMethodCallBack_Type::GetSingleton()
	{
		static __pafcore__InstanceMethodCallBack_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__InstanceMethodCallBack_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__InstanceMethodCallBack_Type*)s_buffer;
			new (s_buffer)__pafcore__InstanceMethodCallBack_Type;
		}
		return s_instance;
	}

	__pafcore__StaticMethodCallBack_Type::__pafcore__StaticMethodCallBack_Type() : ::pafcore::ClassType("StaticMethodCallBack", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::StaticMethodCallBack);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::StaticMethodCallBack, ::pafcore::CallBack)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__StaticMethodCallBack_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__StaticMethodCallBack_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::StaticMethodCallBack>*>(address));
	}

	bool __pafcore__StaticMethodCallBack_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__StaticMethodCallBack_Type* __pafcore__StaticMethodCallBack_Type::GetSingleton()
	{
		static __pafcore__StaticMethodCallBack_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__StaticMethodCallBack_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__StaticMethodCallBack_Type*)s_buffer;
			new (s_buffer)__pafcore__StaticMethodCallBack_Type;
		}
		return s_instance;
	}

	__pafcore__Delegate_Type::__pafcore__Delegate_Type() : ::pafcore::ClassType("Delegate", ::pafcore::value_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::Delegate);
		static ::pafcore::Result s_instanceResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<::pafcore::InstanceMethodCallBack>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_ptr),
			::pafcore::Result(RuntimeTypeOf<::pafcore::StaticMethodCallBack>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_ptr),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_instanceArguments[] = 
		{
			::pafcore::Argument("callBack", RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("object", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("instanceMethodName", RuntimeTypeOf<char>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, true),
			::pafcore::Argument("classType", RuntimeTypeOf<::pafcore::ClassType>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("staticMethodName", RuntimeTypeOf<char>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, true),
			::pafcore::Argument("callBack", RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("object", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("instanceMethodName", RuntimeTypeOf<char>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, true),
			::pafcore::Argument("classType", RuntimeTypeOf<::pafcore::ClassType>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("staticMethodName", RuntimeTypeOf<char>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, true),
		};
		static ::pafcore::Overload s_instanceOverloads[] = 
		{
			::pafcore::Overload(&s_instanceResults[0], &s_instanceArguments[0], 1, false, false),
			::pafcore::Overload(&s_instanceResults[1], &s_instanceArguments[1], 2, false, false),
			::pafcore::Overload(&s_instanceResults[2], &s_instanceArguments[3], 2, false, false),
			::pafcore::Overload(&s_instanceResults[3], &s_instanceArguments[5], 1, false, false),
			::pafcore::Overload(&s_instanceResults[4], &s_instanceArguments[6], 2, false, false),
			::pafcore::Overload(&s_instanceResults[5], &s_instanceArguments[8], 2, false, false),
		};
		static ::pafcore::InstanceMethod s_instanceMethods[] = 
		{
			::pafcore::InstanceMethod("addCallBack", 0, Delegate_addCallBack, &s_instanceOverloads[0], 1),
			::pafcore::InstanceMethod("addInstanceMethod", 0, Delegate_addInstanceMethod, &s_instanceOverloads[1], 1),
			::pafcore::InstanceMethod("addStaticMethod", 0, Delegate_addStaticMethod, &s_instanceOverloads[2], 1),
			::pafcore::InstanceMethod("removeCallBack", 0, Delegate_removeCallBack, &s_instanceOverloads[3], 1),
			::pafcore::InstanceMethod("removeInstanceMethod", 0, Delegate_removeInstanceMethod, &s_instanceOverloads[4], 1),
			::pafcore::InstanceMethod("removeStaticMethod", 0, Delegate_removeStaticMethod, &s_instanceOverloads[5], 1),
		};
		m_instanceMethods = s_instanceMethods;
		m_instanceMethodCount = paf_array_size_of(s_instanceMethods);
		static Metadata* s_members[] = 
		{
			&s_instanceMethods[0],
			&s_instanceMethods[1],
			&s_instanceMethods[2],
			&s_instanceMethods[3],
			&s_instanceMethods[4],
			&s_instanceMethods[5],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__Delegate_Type::destroyInstance(void* address)
	{
		delete reinterpret_cast<::pafcore::Delegate*>(address);
	}

	void __pafcore__Delegate_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::Delegate*>(address));
	}

	bool __pafcore__Delegate_Type::assign(void* dst, const void* src)
	{
		*(::pafcore::Delegate*)dst = *(const ::pafcore::Delegate*)src;
		return true;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_addCallBack(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::CallBack* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->addCallBack(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_addInstanceMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(3 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			if(args[2]->isTemporary())
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			const char* a1;
			if(!args[2]->castToPrimitivePtr(RuntimeTypeOf<char>::RuntimeType::GetSingleton(), (void**)&a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			::pafcore::InstanceMethodCallBack* res = self->addInstanceMethod(a0, a1);
			result->assignReferencePtr(RuntimeTypeOf<::pafcore::InstanceMethodCallBack>::RuntimeType::GetSingleton(), res, false, ::pafcore::Variant::by_ptr);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_addStaticMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(3 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::ClassType* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::ClassType>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			if(args[2]->isTemporary())
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			const char* a1;
			if(!args[2]->castToPrimitivePtr(RuntimeTypeOf<char>::RuntimeType::GetSingleton(), (void**)&a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			::pafcore::StaticMethodCallBack* res = self->addStaticMethod(a0, a1);
			result->assignReferencePtr(RuntimeTypeOf<::pafcore::StaticMethodCallBack>::RuntimeType::GetSingleton(), res, false, ::pafcore::Variant::by_ptr);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_removeCallBack(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::CallBack* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::CallBack>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->removeCallBack(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_removeInstanceMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(3 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			if(args[2]->isTemporary())
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			const char* a1;
			if(!args[2]->castToPrimitivePtr(RuntimeTypeOf<char>::RuntimeType::GetSingleton(), (void**)&a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			self->removeInstanceMethod(a0, a1);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__Delegate_Type::Delegate_removeStaticMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(3 <= numArgs)
		{
			::pafcore::Delegate* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::ClassType* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::ClassType>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			if(args[2]->isTemporary())
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			const char* a1;
			if(!args[2]->castToPrimitivePtr(RuntimeTypeOf<char>::RuntimeType::GetSingleton(), (void**)&a1))
			{
				return ::pafcore::e_invalid_arg_type_2;
			}
			self->removeStaticMethod(a0, a1);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__Delegate_Type* __pafcore__Delegate_Type::GetSingleton()
	{
		static __pafcore__Delegate_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__Delegate_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__Delegate_Type*)s_buffer;
			new (s_buffer)__pafcore__Delegate_Type;
		}
		return s_instance;
	}

	__pafcore__EventHandler_Type::__pafcore__EventHandler_Type() : ::pafcore::ClassType("EventHandler", ::pafcore::value_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Delegate.i")
	{
		m_size = sizeof(::pafcore::EventHandler);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::Delegate>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::EventHandler, ::pafcore::Delegate)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::Delegate>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::Delegate>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		static ::pafcore::Result s_instanceResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_instanceArguments[] = 
		{
			::pafcore::Argument("sender", RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
		};
		static ::pafcore::Overload s_instanceOverloads[] = 
		{
			::pafcore::Overload(&s_instanceResults[0], &s_instanceArguments[0], 1, false, false),
		};
		static ::pafcore::InstanceMethod s_instanceMethods[] = 
		{
			::pafcore::InstanceMethod("invoke", 0, EventHandler_invoke, &s_instanceOverloads[0], 1),
		};
		m_instanceMethods = s_instanceMethods;
		m_instanceMethodCount = paf_array_size_of(s_instanceMethods);
		static Metadata* s_members[] = 
		{
			&s_instanceMethods[0],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__EventHandler_Type::destroyInstance(void* address)
	{
		delete reinterpret_cast<::pafcore::EventHandler*>(address);
	}

	void __pafcore__EventHandler_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::EventHandler*>(address));
	}

	bool __pafcore__EventHandler_Type::assign(void* dst, const void* src)
	{
		*(::pafcore::EventHandler*)dst = *(const ::pafcore::EventHandler*)src;
		return true;
	}

	::pafcore::ErrorCode __pafcore__EventHandler_Type::EventHandler_invoke(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			::pafcore::EventHandler* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::Reference* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->invoke(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__EventHandler_Type* __pafcore__EventHandler_Type::GetSingleton()
	{
		static __pafcore__EventHandler_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__EventHandler_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__EventHandler_Type*)s_buffer;
			new (s_buffer)__pafcore__EventHandler_Type;
		}
		return s_instance;
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__CallBack_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__FunctionCallBack_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__InstanceMethodCallBack_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__StaticMethodCallBack_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__Delegate_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__EventHandler_Type)
