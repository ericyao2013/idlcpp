//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./NotifyHandler.mh"
#include "./Reference.mh"
#include "NotifyHandlerList.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "VoidType.h"
#include "RefCountImpl.h"
#include "Iterator.h"
#include <new>


namespace idlcpp
{

	__pafcore__NotifyHandlerLink_Type::__pafcore__NotifyHandlerLink_Type() : ::pafcore::ClassType("NotifyHandlerLink", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandlerList.i")
	{
		m_size = sizeof(::pafcore::NotifyHandlerLink);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::NotifyHandlerLink, ::pafcore::NotifyHandler)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__NotifyHandlerLink_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__NotifyHandlerLink_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::NotifyHandlerLink>*>(address));
	}

	bool __pafcore__NotifyHandlerLink_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__NotifyHandlerLink_Type* __pafcore__NotifyHandlerLink_Type::GetSingleton()
	{
		static __pafcore__NotifyHandlerLink_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__NotifyHandlerLink_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__NotifyHandlerLink_Type*)s_buffer;
			new (s_buffer)__pafcore__NotifyHandlerLink_Type;
		}
		return s_instance;
	}

	__pafcore__NotifyHandlerList_Type::__pafcore__NotifyHandlerList_Type() : ::pafcore::ClassType("NotifyHandlerList", ::pafcore::value_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandlerList.i")
	{
		m_size = sizeof(::pafcore::NotifyHandlerList);
		static ::pafcore::Result s_instanceResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<bool>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_instanceArguments[] = 
		{
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
		};
		static ::pafcore::Overload s_instanceOverloads[] = 
		{
			::pafcore::Overload(&s_instanceResults[0], &s_instanceArguments[0], 1, false, true),
			::pafcore::Overload(&s_instanceResults[1], &s_instanceArguments[1], 1, false, true),
			::pafcore::Overload(&s_instanceResults[2], &s_instanceArguments[2], 1, false, true),
		};
		static ::pafcore::InstanceMethod s_instanceMethods[] = 
		{
			::pafcore::InstanceMethod("addNotifyHandler", 0, NotifyHandlerList_addNotifyHandler, &s_instanceOverloads[0], 1),
			::pafcore::InstanceMethod("findNotifyHandler", 0, NotifyHandlerList_findNotifyHandler, &s_instanceOverloads[1], 1),
			::pafcore::InstanceMethod("removeNotifyHandler", 0, NotifyHandlerList_removeNotifyHandler, &s_instanceOverloads[2], 1),
		};
		m_instanceMethods = s_instanceMethods;
		m_instanceMethodCount = paf_array_size_of(s_instanceMethods);
		static Metadata* s_members[] = 
		{
			&s_instanceMethods[0],
			&s_instanceMethods[1],
			&s_instanceMethods[2],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__NotifyHandlerList_Type::destroyInstance(void* address)
	{
		delete reinterpret_cast<::pafcore::NotifyHandlerList*>(address);
	}

	void __pafcore__NotifyHandlerList_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::NotifyHandlerList*>(address));
	}

	bool __pafcore__NotifyHandlerList_Type::assign(void* dst, const void* src)
	{
		*(::pafcore::NotifyHandlerList*)dst = *(const ::pafcore::NotifyHandlerList*)src;
		return true;
	}

	::pafcore::ErrorCode __pafcore__NotifyHandlerList_Type::NotifyHandlerList_addNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::NotifyHandlerList* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::NotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->addNotifyHandler(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__NotifyHandlerList_Type::NotifyHandlerList_findNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::NotifyHandlerList* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::NotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			bool res = self->findNotifyHandler(a0);
			result->assignPrimitive(RuntimeTypeOf<bool>::RuntimeType::GetSingleton(), &res);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__NotifyHandlerList_Type::NotifyHandlerList_removeNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::NotifyHandlerList* self;
			if(!args[0]->castToValuePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::NotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::NotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->removeNotifyHandler(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__NotifyHandlerList_Type* __pafcore__NotifyHandlerList_Type::GetSingleton()
	{
		static __pafcore__NotifyHandlerList_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__NotifyHandlerList_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__NotifyHandlerList_Type*)s_buffer;
			new (s_buffer)__pafcore__NotifyHandlerList_Type;
		}
		return s_instance;
	}

	__pafcore__PropertyChangedNotifySource_Type::__pafcore__PropertyChangedNotifySource_Type() : ::pafcore::ClassType("PropertyChangedNotifySource", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/NotifyHandlerList.i")
	{
		m_size = sizeof(::pafcore::PropertyChangedNotifySource);
		static BaseClass s_baseClasses[] =
		{
			{RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton(), paf_base_offset_of(::pafcore::PropertyChangedNotifySource, ::pafcore::Reference)},
		};
		m_baseClasses = s_baseClasses;
		m_baseClassCount = paf_array_size_of(s_baseClasses);
		static ::pafcore::ClassTypeIterator s_classTypeIterators[] =
		{
			::pafcore::ClassTypeIterator(RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass, this),
		};
		RuntimeTypeOf<::pafcore::Reference>::RuntimeType::GetSingleton()->m_firstDerivedClass = &s_classTypeIterators[0];
		m_classTypeIterators = s_classTypeIterators;
		static ::pafcore::Result s_instanceResults[] = 
		{
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<bool>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
			::pafcore::Result(RuntimeTypeOf<void>::RuntimeType::GetSingleton(), false, ::pafcore::Result::by_value),
		};
		static ::pafcore::Argument s_instanceArguments[] = 
		{
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
			::pafcore::Argument("handler", RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), ::pafcore::Argument::by_ptr, false),
		};
		static ::pafcore::Overload s_instanceOverloads[] = 
		{
			::pafcore::Overload(&s_instanceResults[0], &s_instanceArguments[0], 1, false, true),
			::pafcore::Overload(&s_instanceResults[1], &s_instanceArguments[1], 1, false, true),
			::pafcore::Overload(&s_instanceResults[2], &s_instanceArguments[2], 1, false, true),
		};
		static ::pafcore::InstanceMethod s_instanceMethods[] = 
		{
			::pafcore::InstanceMethod("addNotifyHandler", 0, PropertyChangedNotifySource_addNotifyHandler, &s_instanceOverloads[0], 1),
			::pafcore::InstanceMethod("findNotifyHandler", 0, PropertyChangedNotifySource_findNotifyHandler, &s_instanceOverloads[1], 1),
			::pafcore::InstanceMethod("removeNotifyHandler", 0, PropertyChangedNotifySource_removeNotifyHandler, &s_instanceOverloads[2], 1),
		};
		m_instanceMethods = s_instanceMethods;
		m_instanceMethodCount = paf_array_size_of(s_instanceMethods);
		static Metadata* s_members[] = 
		{
			&s_instanceMethods[0],
			&s_instanceMethods[1],
			&s_instanceMethods[2],
		};
		m_members = s_members;
		m_memberCount = paf_array_size_of(s_members);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__PropertyChangedNotifySource_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__PropertyChangedNotifySource_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::PropertyChangedNotifySource>*>(address));
	}

	bool __pafcore__PropertyChangedNotifySource_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifySource_Type::PropertyChangedNotifySource_addNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::PropertyChangedNotifySource* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::PropertyChangedNotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->addNotifyHandler(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifySource_Type::PropertyChangedNotifySource_findNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::PropertyChangedNotifySource* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::PropertyChangedNotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			bool res = self->findNotifyHandler(a0);
			result->assignPrimitive(RuntimeTypeOf<bool>::RuntimeType::GetSingleton(), &res);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	::pafcore::ErrorCode __pafcore__PropertyChangedNotifySource_Type::PropertyChangedNotifySource_removeNotifyHandler(::pafcore::Variant* result, ::pafcore::Variant** args, int_t numArgs)
	{
		if(2 <= numArgs)
		{
			const ::pafcore::PropertyChangedNotifySource* self;
			if(!args[0]->castToReferencePtr(GetSingleton(), (void**)&self))
			{
				return ::pafcore::e_invalid_this_type;
			}
			::pafcore::PropertyChangedNotifyHandler* a0;
			if(!args[1]->castToReferencePtr(RuntimeTypeOf<::pafcore::PropertyChangedNotifyHandler>::RuntimeType::GetSingleton(), (void**)&a0))
			{
				return ::pafcore::e_invalid_arg_type_1;
			}
			self->removeNotifyHandler(a0);
			return ::pafcore::s_ok;
		}
		return ::pafcore::e_invalid_arg_num;
	}

	__pafcore__PropertyChangedNotifySource_Type* __pafcore__PropertyChangedNotifySource_Type::GetSingleton()
	{
		static __pafcore__PropertyChangedNotifySource_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__PropertyChangedNotifySource_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__PropertyChangedNotifySource_Type*)s_buffer;
			new (s_buffer)__pafcore__PropertyChangedNotifySource_Type;
		}
		return s_instance;
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__NotifyHandlerLink_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__NotifyHandlerList_Type)
AUTO_REGISTER_TYPE(::idlcpp::__pafcore__PropertyChangedNotifySource_Type)
