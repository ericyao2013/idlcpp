//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "Reference.mh"
#include "AutoRun.h"
#include "NameSpace.h"
#include "Result.h"
#include "Argument.h"
#include "InstanceField.h"
#include "StaticField.h"
#include "InstanceProperty.h"
#include "StaticProperty.h"
#include "InstanceMethod.h"
#include "StaticMethod.h"
#include "Enumerator.h"
#include "PrimitiveType.h"
#include "VoidType.h"
#include "RefCountImpl.h"
#include "Iterator.h"
#include <new>


namespace idlcpp
{

	__pafcore__Reference_Type::__pafcore__Reference_Type() : ::pafcore::ClassType("Reference", ::pafcore::reference_object, "D:/DeepEye2018/deepeye/src/paf/pafcore/Reference.i")
	{
		m_size = sizeof(::pafcore::Reference);
		::pafcore::NameSpace::GetGlobalNameSpace()->getNameSpace("pafcore")->registerMember(this);
	}

	void __pafcore__Reference_Type::destroyInstance(void* address)
	{
		reinterpret_cast<::pafcore::Reference*>(address)->release();
	}

	void __pafcore__Reference_Type::destroyArray(void* address)
	{
		paf_delete_array(reinterpret_cast<::pafcore::RefCountImpl<::pafcore::Reference>*>(address));
	}

	bool __pafcore__Reference_Type::assign(void* dst, const void* src)
	{
		return false;
	}

	__pafcore__Reference_Type* __pafcore__Reference_Type::GetSingleton()
	{
		static __pafcore__Reference_Type* s_instance = 0;
		static char s_buffer[sizeof(__pafcore__Reference_Type)];
		if(0 == s_instance)
		{
			s_instance = (__pafcore__Reference_Type*)s_buffer;
			new (s_buffer)__pafcore__Reference_Type;
		}
		return s_instance;
	}

}

AUTO_REGISTER_TYPE(::idlcpp::__pafcore__Reference_Type)
