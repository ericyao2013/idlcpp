//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "./Reference.h"
namespace pafcore{ class Iterator; }
namespace pafcore{ class ClassType; }


#include "Utility.h"


namespace pafcore
{
	enum class PropertyChangedFlag
	{
		update,
		remove,
		add,
		reset,
		candidate_list
	};

	class PAFCORE_EXPORT NotifyHandler : public Reference
	{
	public:
		static ::pafcore::ClassType* GetType();
		virtual ::pafcore::ClassType* getType();
		virtual size_t getAddress();




	};

	class PAFCORE_EXPORT PropertyChangedNotifyHandler : public NotifyHandler
	{
	public:
		static ::pafcore::ClassType* GetType();
		virtual ::pafcore::ClassType* getType();
		virtual size_t getAddress();

		virtual void onPropertyChanged(Reference* sender,string_t propertyName,PropertyChangedFlag flag,Iterator* iterator);
		virtual void onPropertyAvailabilityChanged(Reference* sender,string_t propertyName);
		virtual void onDynamicPropertyChanged(Reference* sender,string_t propertyName,PropertyChangedFlag flag,Iterator* iterator);
		virtual void onUpdateDynamicProperty(Reference* sender);
	};
}
